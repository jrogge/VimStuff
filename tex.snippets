priority -50

extends texmath

global !p

def create_table(snip):
	rows = snip.buffer[snip.line].split('x')[0]
	cols = snip.buffer[snip.line].split('x')[1]

	int_val = lambda string: int(''.join(s for s in string if s.isdigit()))
	
	rows = int_val(rows)
	cols = int_val(cols)

	offset = cols + 1
	old_spacing = snip.buffer[snip.line][:snip.buffer[snip.line].rfind('\t') + 1]
	
	snip.buffer[snip.line] = ''
	
	final_str = old_spacing + "\\begin{tabular}{|" + "|".join(['$' + str(i + 1) for i in range(cols)]) + "|}\n"

	for i in range(rows):
		final_str += old_spacing + '\t'
		final_str += " & ".join(['$' + str(i * cols + j + offset) for j in range(cols)])

		final_str += " \\\\\\\n"

	final_str += old_spacing + "\\end{tabular}\n$0"

	snip.expand_anon(final_str)

def add_row(snip):
	row_len = int(''.join(s for s in snip.buffer[snip.line] if s.isdigit()))
	old_spacing = snip.buffer[snip.line][:snip.buffer[snip.line].rfind('\t') + 1]

	snip.buffer[snip.line] = ''
	
	final_str = old_spacing
	final_str += " & ".join(['$' + str(j + 1) for j in range(row_len)])
	final_str += " \\\\\\"

	snip.expand_anon(final_str)

endglobal

# snippets start

# function restriction
snippet rest "bar notation for function restriction" w
\\left . ${1} \\right|_\{${2}\} ${0}
endsnippet

# mathfrak
snippet frak "mathfrak" i
\\mathfrak{${1}}$0
endsnippet

# exponential
snippet exp "exponential" i
\\exp \left \\{ ${1} \right \\}${0}
endsnippet

# column vector
snippet colvec "column vector" i
\\left [
\\begin{smallmatrix}
	${1}
\\end{smallmatrix}
\\right ]${0}
endsnippet

# custom norm
snippet cval "custom vertical line notation for norm" w
\\|${1}\\|_${0}
endsnippet

# norm
snippet val "vertical line notation for norm" w
\\|${1}\\|${0}
endsnippet

# full line with space above it
snippet fline "full line" b
\\\\
\centerline{\rule{\textwidth}{0.75pt}}
${0}
endsnippet

# line with space above it
snippet sline "line" b
\\\\
\centerline{\rule{0.75\textwidth}{0.75pt}}
${0}
endsnippet

# line without space above it
snippet line "line" b
\centerline{\rule{0.75\textwidth}{0.75pt}}
${0}
endsnippet

snippet stmt "statment" b
\\textit{Statement}:
${VISUAL}
\\\\
\centerline{\rule{0.75\textwidth}{0.75pt}}
${0}
endsnippet

# Grobner bases (plural)
snippet GB "grobner bases text with umlaut" i
Gr\\"obner bases${0}
endsnippet

# Grobner basis
snippet Gb "grobner basis text with umlaut" i
Gr\\"obner basis${0}
endsnippet

# Grobner basis
snippet gb "grobner basis notation" i
\\{ g_1, \ldots, g_t \\}${0}
endsnippet

# default polynomial ring
snippet dpr "default polynomial ring" i
K[x_1, \ldots, x_n]${0}
endsnippet

# Polynomial ring over custom base ring
snippet bpr "base polynomial ring" i
${1:K}[x_1, \ldots, x_n]${0}
endsnippet

# custom polynomial ring
snippet cpr "Polynomial ring" i
${1:K}[${2:x}_{${3:1}}, \ldots, $2_{${4:n}}]${0}
endsnippet

# suppress qed symbol
snippet suppqed "suppress qed" i
\\renewcommand{\\qedsymbol}{}$0
endsnippet

# calR
snippet cr "mathcal{R}" i
\\mathcal{R}$0
endsnippet

# calD
snippet cd "mathcal{D}" i
\\mathcal{D}$0
endsnippet

# calC
snippet cc "mathcal{C}" i
\\mathcal{C}$0
endsnippet

# cal
snippet cal "mathcal" i
\\mathcal{$1}$0
endsnippet

# matrix
snippet mat "pmatrix" b
\\begin{pmatrix}
	${0:${VISUAL}}
\\end{pmatrix}
endsnippet

# matrix
snippet 2mat "pmatrix" b
\\begin{pmatrix}
	$1 & $2\\\\
	$3 & $4
\\end{pmatrix}
${0:${VISUAL}}
endsnippet

# big direct sum symbol
snippet bp "big o plus" i
\bigoplus${0}
endsnippet

# direct sum symbol
snippet opl "o plus" i
\oplus_{${1}}${0}
endsnippet

# frac
snippet frac "fractions" i
\frac{${1:num}}{${2:denom}}${0}
endsnippet

# leading term variable range
snippet ltvr "leading term variable range" i
LT(${1:g}_{${2:1}}), \ldots , LT($1_{${3:t}})${0}
endsnippet

# custom variable range
snippet cvr "custom variable range" i
${1:x}_{${2:1}}, \ldots , $1_{${3:n}}${0}
endsnippet

# g variable range
snippet gvr "g variable range" i
g_{1}, \ldots , g_{${1:t}}${0}
endsnippet

# x variable range
snippet xvr "x variable range" i
x_{1}, \ldots , x_{${1:n}}${0}
endsnippet

# inverse
snippet iv "inverse" i
^\{-1\}
endsnippet

# set builder
snippet stb "set" w
\\{$1 \: : \: $2\\}$0
endsnippet

# conditional set
snippet ust "set without condition" w
\\{$1\\}$0
endsnippet

# Floor
snippet floor "floor" w
\\lfloor ${1} \\rfloor ${0}
endsnippet

# Ceiling
snippet ceil "ceiling" w
\\lceil ${1} \\rceil ${0}
endsnippet

# set
snippet set "set notation" w
\\{${1}\\}${0}
endsnippet

# Generated group
snippet gen "bracket notation for group generated by" w
\\langle ${1} \\rangle ${0}
endsnippet

# QED
snippet qed "right-aligned QED square" w
$\\hfill \\square$
endsnippet

# Black QED
snippet bqed "right-aligned black QED square" w
$\\hfill \\blacksquare$
endsnippet

# \begin{}...\end{}
snippet beg "begin-end block" b
\\begin{${1:env}}
	${0:${VISUAL}}
\\end{$1}
endsnippet

snippet ytab "young tableaux" b
\\begin{ytableau}
	${0:${VISUAL}}
\\end{ytableau}
endsnippet

snippet nota "notation" b
\\begin{nota}
	${0:${VISUAL}}
\\end{nota}
endsnippet

snippet prop "proposition" b
\\begin{proposition}[${1}]
	${0:${VISUAL}}
\\end{proposition}
endsnippet

snippet cases "cases" b
\\begin{cases}
	${0:${VISUAL}}
\\end{cases}
endsnippet

snippet eg "example" b
\\begin{example}
	${0:${VISUAL}}
\\end{example}
endsnippet

snippet def "definition" b
\\begin{definition}[${1}]
	${0:${VISUAL}}
\\end{definition}
endsnippet

snippet obsv "observation" b
\\begin{observation}
	${0:${VISUAL}}
\\end{observation}
endsnippet

snippet con "conjecture" b
\\begin{conjecture}
	${0:${VISUAL}}
\\end{conjecture}
endsnippet

snippet rem "remark" b
\\begin{remark}
	${0:${VISUAL}}
\\end{remark}
endsnippet

snippet thm "theorem" b
\\begin{thm}[${1}]
	${0:${VISUAL}}
\\end{thm}
endsnippet

snippet cprob "custom problem" b
\\begin{prob}{${1}}
	${0:${VISUAL}}
\\end{prob}
endsnippet

snippet prob "problem" b
\\begin{prob}
	${0:${VISUAL}}
\\end{prob}
endsnippet

snippet gat "gather* env" b
\\begin{gather*}
	${0:${VISUAL}}
\\end{gather*}
endsnippet

snippet ali "align* env" b
\\begin{align*}
	${0:${VISUAL}}
\\end{align*}
endsnippet

snippet alin "align env" b
\\begin{align}
	${0:${VISUAL}}
\\end{align}
endsnippet

snippet lem "lemma" b
\\begin{lemma}
	${0:${VISUAL}}
\\end{lemma}
endsnippet

snippet not "notation" b
\\begin{notation}
	${0:${VISUAL}}
\\end{notation}
endsnippet

snippet cor "corollary" b
\\begin{corollary}
	${0:${VISUAL}}
\\end{corollary}
endsnippet

snippet proof "proof" b
\\begin{proof}
	${0:${VISUAL}}
\\end{proof}
endsnippet

snippet claim "claim environment" b
\\begin{claim}
	${0:${VISUAL}}
\\end{claim}
endsnippet

snippet pf "custom proof environment" b
\begin{pf}
	${1:${VISUAL}}
	$\hfill\square$
\end{pf}
${0}
endsnippet

snippet abs "abstract environment" b
\begin{abstract}
	$0
\end{abstract}
endsnippet

snippet tab "tabular / array environment" b
\begin{${1:t}${1/(t)$|(a)$|(.*)/(?1:abular)(?2:rray)/}}{${2:c}}
$0${2/(?<=.)(c|l|r)|./(?1: & )/g}
\end{$1${1/(t)$|(a)$|(.*)/(?1:abular)(?2:rray)/}}
endsnippet

pre_expand "create_table(snip)"
snippet "gentbl(\d+)x(\d+)" "Generate table of *width* by *height*" r  
endsnippet

pre_expand "add_row(snip)"
snippet "tr(\d+)" "Add table row of dimension ..." r
endsnippet

snippet table "Table environment" b
\begin{table}[${1:htpb}]
	\centering
	\caption{${2:caption}}
	\label{tab:${3:label}}
	\begin{${4:t}${4/(t)$|(a)$|(.*)/(?1:abular)(?2:rray)/}}{${5:c}}
	$0${5/(?<=.)(c|l|r)|./(?1: & )/g}
	\end{$4${4/(t)$|(a)$|(.*)/(?1:abular)(?2:rray)/}}
\end{table}
endsnippet

snippet fig "Figure environment" b
\begin{figure}[${2:htpb}]
	\centering
	\includegraphics[width=${3:0.8}\linewidth]{${4:name.ext}}
	\caption{${4/(\w+)\.\w+/\u$1/}$0}%
	\label{fig:${4/(\w+)\.\w+/$1/}}
\end{figure}
endsnippet

snippet enuma "Enumerate alphabetical" b
\begin{enumerate}[(a)]
	\item ${0:${VISUAL}}
\end{enumerate}
endsnippet

snippet enum "Enumerate" b
\begin{enumerate}
	\item $0
\end{enumerate}
endsnippet

snippet item "Itemize" b
\begin{itemize}
	\item $0
\end{itemize}
endsnippet

snippet desc "Description" b
\begin{description}
	\item[$1] $0
\end{description}
endsnippet

snippet it "Individual item" b
\item $0
endsnippet

snippet part "Part" b
\part{${1:part name}}%
\label{prt:${2:${1/(\w+)|\W+/(?1:\L$0\E:_)/ga}}}

$0
endsnippet

snippet cha "Chapter" b
\chapter{${1:chapter name}}%
\label{cha:${2:${1/\\\w+\{(.*?)\}|\\(.)|(\w+)|([^\w\\]+)/(?4:_:\L$1$2$3\E)/ga}}}

$0
endsnippet

snippet sec "Section"
\section{${1:${VISUAL:section name}}}%
\label{sec:${2:${1/\\\w+\{(.*?)\}|\\(.)|(\w+)|([^\w\\]+)/(?4:_:\L$1$2$3\E)/ga}}}

$0
endsnippet

snippet sec* "Section"
\section*{${1:${VISUAL:section name}}}%
\label{sec:${2:${1/\\\w+\{(.*?)\}|\\(.)|(\w+)|([^\w\\]+)/(?4:_:\L$1$2$3\E)/ga}}}

${0}
endsnippet


snippet sub "Subsection"
\subsection{${1:${VISUAL:subsection name}}}%
\label{sub:${2:${1/\\\w+\{(.*?)\}|\\(.)|(\w+)|([^\w\\]+)/(?4:_:\L$1$2$3\E)/ga}}}

$0
endsnippet

snippet sub* "Subsection"
\subsection*{${1:${VISUAL:subsection name}}}%
\label{sub:${2:${1/\\\w+\{(.*?)\}|\\(.)|(\w+)|([^\w\\]+)/(?4:_:\L$1$2$3\E)/ga}}}

${0}
endsnippet

snippet ssub "Subsubsection"
\subsubsection{${1:${VISUAL:subsubsection name}}}%
\label{ssub:${2:${1/\\\w+\{(.*?)\}|\\(.)|(\w+)|([^\w\\]+)/(?4:_:\L$1$2$3\E)/ga}}}

$0
endsnippet

snippet ssub* "Subsubsection"
\subsubsection*{${1:${VISUAL:subsubsection name}}}%
\label{ssub:${2:${1/\\\w+\{(.*?)\}|\\(.)|(\w+)|([^\w\\]+)/(?4:_:\L$1$2$3\E)/ga}}}

${0}
endsnippet

snippet par "Paragraph"
\paragraph{${1:${VISUAL:paragraph name}}}%
\label{par:${2:${1/\\\w+\{(.*?)\}|\\(.)|(\w+)|([^\w\\]+)/(?4:_:\L$1$2$3\E)/ga}}}

$0
endsnippet

snippet subp "Subparagraph"
\subparagraph{${1:${VISUAL:subparagraph name}}}%
\label{par:${2:${1/\\\w+\{(.*?)\}|\\(.)|(\w+)|([^\w\\]+)/(?4:_:\L$1$2$3\E)/ga}}}

$0
endsnippet

snippet ac "Acroynm normal" b
\ac{${1:acronym}}
$0
endsnippet

snippet acl "Acroynm expanded" b
\acl{${1:acronym}}
$0
endsnippet



snippet ni "Non-indented paragraph" b
\noindent
$0
endsnippet

snippet pac "Package" b
\usepackage`!p snip.rv='[' if t[1] else ""`${1:options}`!p snip.rv = ']' if t[1] else ""`{${2:package}}$0
endsnippet

snippet lp "Long parenthesis"
\left(${1:${VISUAL:contents}}\right)$0
endsnippet

snippet "mint(ed)?( (\S+))?" "Minted code typeset" br
\begin{listing}
\begin{minted}[linenos,numbersep=5pt,frame=lines,framesep=2mm]{${1:`!p
snip.rv = match.group(3) if match.group(2) is not None else "language"`}}
${2:${VISUAL:code}}
\end{minted}
\caption{${3:caption name}}
\label{lst:${4:${3/\\\w+\{(.*?)\}|\\(.)|(\w+)|([^\w\\]+)/(?4:_:\L$1$2$3\E)/ga}}}
\end{listing}

$0
endsnippet
# vim:ft=snippets:
